# install and load libraries
# install.packages("ggplot2")
# install.packages("Hmisc")
# install.packages("tidyverse")
# install.packages("rstudioapi")
# install.packages("xgboost")
# install.packages("caret")
# install.packages("gplots")
# install.packages("MLmetrics")
libraries <- c("rstudioapi", "Hmisc", "ggplot2", "tidyverse", "xgboost", "caret", "gplots", "MLmetrics")
lapply(libraries, library, character.only = TRUE)


# Define functions
# create_train_test_val <- function(data, target_variable, train_prop, test_prop) {
#   # Create the train dataset
#   train_idx <- createDataPartition(data[[target_variable]], p = train_prop, list = FALSE)
#   train_data <- data[train_idx, ]
  
#   # Create the remaining dataset
#   remaining_data <- data[-train_idx, ]
  
#   # Create the test dataset
#   test_idx <- createDataPartition(remaining_data[[target_variable]], p = test_prop, list = FALSE)
#   test_data <- remaining_data[test_idx, ]
  
#   # Create the validation dataset
#   val_data <- remaining_data[-test_idx, ]
  
#   # Return the train, test, and validation datasets
#   return(list(train = train_data, test = test_data, val = val_data))
# }

set.seed(42)

# set wd and load data
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.csv("data.csv", sep = ";")
# remove trailing whitespace in rows
data$Production_system <- trimws(data$Production_system)

# extract numerical data
# numerical <- data[, (5):ncol(data)]
on_meat <- data[data$Scan_type == "OM", ]
# numerical <- on_meat[, (5): ncol(on_meat)]

# Convert to factor Change column name to production_system or Freshness
on_meat$Production_system <- as.numeric(factor(on_meat$Production_system))
on_meat$Freshness <- as.numeric(factor(on_meat$Freshness))

on_meat <- on_meat[complete.cases(on_meat$Production_system, on_meat$Freshness), ]
 
# split the data
data_splits <- sample(c(TRUE, FALSE), nrow(on_meat), replace = TRUE, prob = c(0.7, 0.3))
train_data <- on_meat[data_splits, ]
test_data <- on_meat[!data_splits, ]

cross_val <- function(data, k) {
    acc <- 0
    f1 <- 0
    class_labels <- c(1, 2, 3, 4, 5, 6, 7, 8)
    conf_mat <- table(Actual = class_labels, Predicted = rev(class_labels))
    flds <- createFolds(as.integer(rownames(train_data)), k = k, list = TRUE, returnTrain = FALSE)
    x_columns <- colnames(train_data)
    x_columns <- x_columns[!x_columns %in% c("Sample_number", "Scan_type", "Freshness", "Production_system")]
    for (i in 1: k) {
        other_data <- data[-flds[[i]], ]
        val_data <- data[flds[[i]], ]
        train_x <- as.matrix(other_data[colnames(other_data) %in% x_columns])
        val_x <- as.matrix(val_data[colnames(val_data) %in% x_columns])
        train_y <- as.matrix(other_data$Production_system)
        val_y <- as.matrix(val_data$Production_system)     
        train_matrix <- xgb.DMatrix(data = train_x, label = train_y)
        val_matrix <- xgb.DMatrix(data = val_x, label = val_y)        
        xgboost_model <- xgb.train(data = train_matrix, nrounds = 10, objective = "multi:softmax", num_class = 9)
        pred <- factor(predict(xgboost_model, newdata = val_matrix), levels = 1:8)
        val_y <- factor(val_y, levels = 1:8)
        # print(dim(val_matrix))
        # print(dim(train_matrix))
        # print(as.factor(val_y), levels = 1:8)
        # print(pred)
        # print(confusionMatrix(pred, val_y)$table)
        # print(conf_mat)
        result <- confusionMatrix(pred, val_y)
        acc <- acc + unname(result$overall["Accuracy"])
        f1 <- f1 + mean(result$byClass[, "F1"], na.rm = TRUE)
        conf_mat <- conf_mat + result$table
        # print(F1_Score(y_true = val_y, y_pred = round(pred)))
        print("Iteration done")
    }
    mean_acc <- acc / k
    mean_f1 <- f1 / k
    print("Accuracy: ")
    print(mean_acc)
    print("F1 Score: ")
    print(mean_f1)
    print("Confusion Matrix: ")
    print(conf_mat)
}

cross_val(train_data, 10)
